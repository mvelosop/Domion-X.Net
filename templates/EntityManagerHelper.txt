//----------------------------------------
// $APP$               (e.g. DFlow)
// $MODULE$            (e.g. Budget)
// $ENTITY$            (e.g. BudgetClass)
// $KEYENTITYPROPERTY$ (e.g. Name)
// $KEYDATAPROPERTY$   (e.g. Name)
//----------------------------------------


using Autofac;
using $APP$.$MODULE$.Core.Model;
using $APP$.$MODULE$.Lib.Services;
using Domion.Lib.Extensions;
using FluentAssertions;
using FluentAssertions.Equivalency;
using System;

namespace $APP$.$MODULE$.Lib.Tests.Helpers
{
    /// <summary>
    ///     <para>
    ///         Test helper class for $ENTITY$Manager.
    ///     </para>
    ///
    ///     <para>
    ///         Has to be used within an Autofac ILifetimeScope. Manages entity class "$ENTITY$" using data class "$ENTITY$Data" as input
    ///     </para>
    /// </summary>
    public class $ENTITY$ManagerHelper
    {
        private readonly Lazy<$ENTITY$DataMapper> Lazy$ENTITY$DataMapper;
        private readonly Lazy<$ENTITY$Manager> Lazy$ENTITY$Manager;
        private readonly ILifetimeScope Scope;

        /// <summary>
        ///     Creates a Helper for $ENTITY$Manager to help in the test's Arrange and Assert sections
        /// </summary>
        public $ENTITY$ManagerHelper(
            ILifetimeScope scope,
            Lazy<$ENTITY$DataMapper> lazy$ENTITY$DataMapper,
            Lazy<$ENTITY$Manager> lazy$ENTITY$Manager)
        {
            Scope = scope;

            Lazy$ENTITY$Manager = lazy$ENTITY$Manager;
            Lazy$ENTITY$DataMapper = lazy$ENTITY$DataMapper;
        }

        private $ENTITY$Manager $ENTITY$Manager => Lazy$ENTITY$Manager.Value;

        private $ENTITY$DataMapper $ENTITY$Mapper => Lazy$ENTITY$DataMapper.Value;

        /// <summary>
        ///     Asserts that entities with the supplied key data values do not exist. This method DOES NOT DELETE entities, use EnsureEntitiesDoNotExist for that.
        /// </summary>
        /// <param name="dataSet">Data for the entities to be searched for</param>
        public void AssertEntitiesDoNotExist(params $ENTITY$Data[] dataSet)
        {
            using (ILifetimeScope scope = Scope.BeginLifetimeScope())
            {
                var manager = scope.Resolve<$ENTITY$Manager>();

                foreach ($ENTITY$Data data in dataSet)
                {
                    $ENTITY$ entity = manager.SingleOrDefault(e => e.$KEYENTITYPROPERTY$ == data.$KEYDATAPROPERTY$);

                    entity.Should().BeNull(@"because $ENTITY$ ""{0}"" MUST NOT EXIST!", data.$KEYDATAPROPERTY$);
                }
            }
        }

        /// <summary>
        ///     Asserts that entities equivalent to the supplied input data classes exist. This method DOES NOT CREATE OR UPDATE entities, , use EnsureEntitiesExist for that.
        /// </summary>
        /// <param name="dataSet">Data for the entities to be searched for</param>
        public void AssertEntitiesExist(params $ENTITY$Data[] dataSet)
        {
            using (ILifetimeScope scope = Scope.BeginLifetimeScope())
            {
                var manager = scope.Resolve<$ENTITY$Manager>();
                var mapper = scope.Resolve<$ENTITY$DataMapper>();

                foreach ($ENTITY$Data data in dataSet)
                {
                    $ENTITY$ entity = manager.SingleOrDefault(e => e.$KEYENTITYPROPERTY$ == data.$KEYDATAPROPERTY$);

                    entity.Should().NotBeNull(@"because $ENTITY$ ""{0}"" MUST EXIST!", data.$KEYDATAPROPERTY$);

                    $ENTITY$Data entityData = mapper.CreateData(entity);

                    entityData.ShouldBeEquivalentTo(data);
                }
            }
        }

        /// <summary>
        ///     Ensures that the entities do not exist in the database or are successfully removed
        /// </summary>
        /// <param name="dataSet">Data for the entities to be searched for and removed if necessary</param>
        public void EnsureEntitiesDoNotExist(params $ENTITY$Data[] dataSet)
        {
            foreach ($ENTITY$Data data in dataSet)
            {
                $ENTITY$ entity = $ENTITY$Manager.SingleOrDefault(e => e.$KEYENTITYPROPERTY$ == data.$KEYDATAPROPERTY$);

                if (entity == null) continue;

                var errors = $ENTITY$Manager.TryDelete(entity);

                errors.Should().BeEmpty(@"because $ENTITY$ ""{0}"" has to be removed!", data.$KEYDATAPROPERTY$);
            }

            $ENTITY$Manager.SaveChanges();

            AssertEntitiesDoNotExist(dataSet);
        }

        /// <summary>
        ///     Ensures that the entities exist in the database or are successfully added
        /// </summary>
        /// <param name="dataSet"></param>
        /// <param name="dataSet">Data for the entities to be searched for and added or updated if necessary</param>
        public void EnsureEntitiesExist(params $ENTITY$Data[] dataSet)
        {
            foreach ($ENTITY$Data data in dataSet)
            {
                $ENTITY$ entity = $ENTITY$Manager.SingleOrDefault(e => e.$KEYENTITYPROPERTY$ == data.$KEYDATAPROPERTY$);

                entity = entity == null ? $ENTITY$Mapper.CreateEntity(data) : $ENTITY$Mapper.UpdateEntity(entity, data);

                var errors = $ENTITY$Manager.TryUpsert(entity);

                errors.Should().BeEmpty(@"because $ENTITY$ ""{0}"" has to be added!", data.$KEYDATAPROPERTY$);
            }

            $ENTITY$Manager.SaveChanges();

            AssertEntitiesExist(dataSet);
        }
    }
}
