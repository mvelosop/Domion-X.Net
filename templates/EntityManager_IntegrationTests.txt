//----------------------------------------
// $APP$               (e.g. DFlow)
// $MODULE$            (e.g. Budget)
// $ENTITY$            (e.g. BudgetClass)
// $KEYENTITYPROPERTY$ (e.g. Name)
// $KEYDATAPROPERTY$   (e.g. Name)
//----------------------------------------


using Autofac;
using $APP$.$MODULE$.Core.Model;
using $APP$.$MODULE$.Lib.Services;
using $APP$.$MODULE$.Lib.Tests.Helpers;
using $APP$.$MODULE$.Setup;
using Domion.FluentAssertions.Extensions;
using Domion.Lib.Extensions;
using FluentAssertions;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using Xunit;

namespace $APP$.$MODULE$.Lib.Tests
{
    [Trait("Type", "Integration")]
    public class $ENTITY$Manager_IntegrationTests
    {
        private const string ConnectionString = "Data Source=localhost;Initial Catalog=$APP$.$MODULE$.Lib.Tests;Integrated Security=SSPI;MultipleActiveResultSets=true";

        private static readonly $MODULE$DbHelper DbHelper;

        private readonly IContainer Container;

        static $ENTITY$Manager_IntegrationTests()
        {
            DbHelper = SetupDatabase(ConnectionString);
        }

        public $MODULE$Manager_IntegrationTests()
        {
            Container = SetupContainer(DbHelper);
        }

        [Fact]
        public void TryDelete_DeletesRecord_WhenValidData()
        {
            // Arrange ---------------------------

            var data = new $ENTITY$Data("Delete-Success-Valid - Inserted");

            UsingManagerHelper((scope, helper) =>
            {
                helper.EnsureEntitiesExist(data);
            });

            // Act -------------------------------

            IEnumerable<ValidationResult> errors = null;

            UsingManager((scope, manager) =>
            {
                $ENTITY$ entity = manager.SingleOrDefault(e => e.$KEYENTITYPROPERTY$ == data.$KEYDATAPROPERTY$);

                errors = manager.TryDelete(entity).ToList();

                manager.SaveChanges();
            });

            // Assert ----------------------------

            errors.Should().BeEmpty();

            UsingManagerHelper((scope, helper) =>
            {
                helper.AssertEntitiesDoNotExist(data);
            });
        }

        [Fact]
        public void TryInsert_Fails_WhenDuplicateKeyData()
        {
            // Arrange ---------------------------

            var data = new $ENTITY$Data("Insert-Error-Duplicate - Inserted");

            UsingManagerHelper((scope, helper) =>
            {
                helper.EnsureEntitiesExist(data);
            });

            // Act -------------------------------

            IEnumerable<ValidationResult> errors = null;

            UsingManager((scope, manager) =>
            {
                var mapper = scope.Resolve<$ENTITY$DataMapper>();

                $ENTITY$ entity = mapper.CreateEntity(data);

                errors = manager.TryInsert(entity).ToList();
            });

            // Assert ----------------------------

            errors.Should().ContainErrorMessage($ENTITY$Manager.duplicateBy$KEYENTITYPROPERTY$Error);
        }

        [Fact]
        public void TryInsert_InsertsRecord_WhenValidData()
        {
            IEnumerable<ValidationResult> errors = null;

            // Arrange ---------------------------

            var data = new $ENTITY$Data("Insert-Success-Valid - Inserted");

            UsingManagerHelper((scope, helper) =>
            {
                helper.EnsureEntitiesDoNotExist(data);
            });

            // Act -------------------------------

            UsingManager((scope, manager) =>
            {
                var mapper = scope.Resolve<$ENTITY$DataMapper>();

                $ENTITY$ entity = mapper.CreateEntity(data);

                errors = manager.TryInsert(entity).ToList();

                manager.SaveChanges();
            });

            // Assert ----------------------------

            errors.Should().BeEmpty();

            UsingManagerHelper((scope, helper) =>
            {
                helper.AssertEntitiesExist(data);
            });
        }

        [Fact]
        public void TryUpdate_Fails_WhenDuplicateKeyData()
        {
            // Arrange ---------------------------

            var data = new $ENTITY$Data("Update-Error-Duplicate - Inserted first");
            var update = new $ENTITY$Data("Update-Error-Duplicate - Inserted second");

            UsingManagerHelper((scope, helper) =>
            {
                helper.EnsureEntitiesExist(data, update);
            });

            // Act -------------------------------

            IEnumerable<ValidationResult> errors = null;

            UsingManager((scope, manager) =>
            {
                var mapper = scope.Resolve<$ENTITY$DataMapper>();

                $ENTITY$ entity = manager.SingleOrDefault(e => e.$KEYENTITYPROPERTY$ == data.$KEYDATAPROPERTY$);

                entity = mapper.UpdateEntity(entity, update);

                errors = manager.TryUpdate(entity).ToList();
            });

            // Assert ----------------------------

            errors.Should().ContainErrorMessage($ENTITY$Manager.duplicateBy$KEYENTITYPROPERTY$Error);
        }

        [Fact]
        public void TryUpdate_UpdatesRecord_WhenValidData()
        {
            // Arrange ---------------------------

            var data = new $ENTITY$Data("Update-Success-Valid - Inserted");
            var update = new $ENTITY$Data("Update-Success-Valid - Updated");

            UsingManagerHelper((scope, helper) =>
            {
                helper.EnsureEntitiesExist(data);
                helper.EnsureEntitiesDoNotExist(update);
            });

            // Act -------------------------------

            IEnumerable<ValidationResult> errors = null;

            UsingManager((scope, manager) =>
            {
                var mapper = scope.Resolve<$ENTITY$DataMapper>();

                $ENTITY$ entity = manager.SingleOrDefault(e => e.$KEYENTITYPROPERTY$ == data.$KEYDATAPROPERTY$);

                entity = mapper.UpdateEntity(entity, update);

                errors = manager.TryUpdate(entity).ToList();

                manager.SaveChanges();
            });

            // Assert ----------------------------

            errors.Should().BeEmpty();

            UsingManagerHelper((scope, helper) =>
            {
                helper.AssertEntitiesExist(update);
            });
        }

        private static IContainer SetupContainer($MODULE$DbHelper dbHelper)
        {
            var containerSetup = new $MODULE$ContainerSetup(dbHelper);

            var builder = new ContainerBuilder();

            containerSetup.RegisterTypes(builder);

            IContainer container = builder.Build();

            return container;
        }

        private static $MODULE$DbHelper SetupDatabase(string connectionString)
        {
            var dbHelper = new $MODULE$DbHelper(connectionString);

            dbHelper.SetupDatabase();

            return dbHelper;
        }

        private void UsingManager(Action<ILifetimeScope, $ENTITY$Manager> action)
        {
            using (ILifetimeScope scope = Container.BeginLifetimeScope())
            {
                var manager = scope.Resolve<$ENTITY$Manager>();

                action.Invoke(scope, manager);
            }
        }

        private void UsingManagerHelper(Action<ILifetimeScope, $ENTITY$ManagerHelper> action)
        {
            using (ILifetimeScope scope = Container.BeginLifetimeScope())
            {
                var helper = scope.Resolve<$ENTITY$ManagerHelper>();

                action.Invoke(scope, helper);
            }
        }
    }
}
