// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace DFlow.Budget.Specs.Specs
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class Dflow_2_Feature_ManageBudgetLinesFeature : Xunit.IClassFixture<Dflow_2_Feature_ManageBudgetLinesFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "(dflow-2) - Manage budget lines.feature"
#line hidden
        
        public Dflow_2_Feature_ManageBudgetLinesFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "(dflow-2) - Feature - Manage budget lines", "\tIn order to manage my personal budget\r\n\tAs the one responsible to do it\r\n\tI want" +
                    " to manage a list of budget lines grouped in budget classes", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SetFixture(Dflow_2_Feature_ManageBudgetLinesFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="(dflow-2.1 - Scenario - Add budget lines")]
        [Xunit.TraitAttribute("FeatureTitle", "(dflow-2) - Feature - Manage budget lines")]
        [Xunit.TraitAttribute("Description", "(dflow-2.1 - Scenario - Add budget lines")]
        public virtual void Dflow_2_1_Scenario_AddBudgetLines()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("(dflow-2.1 - Scenario - Add budget lines", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "TransactionType",
                        "Order"});
            table1.AddRow(new string[] {
                        "Income",
                        "Income",
                        "1"});
            table1.AddRow(new string[] {
                        "Housing",
                        "Expense",
                        "2"});
            table1.AddRow(new string[] {
                        "Transportation",
                        "Expense",
                        "3"});
            table1.AddRow(new string[] {
                        "Insurance",
                        "Expense",
                        "4"});
            table1.AddRow(new string[] {
                        "Food",
                        "Expense",
                        "5"});
            table1.AddRow(new string[] {
                        "Children",
                        "Expense",
                        "6"});
            table1.AddRow(new string[] {
                        "Savings",
                        "Savings",
                        "7"});
            table1.AddRow(new string[] {
                        "Investment",
                        "Investment",
                        "8"});
            table1.AddRow(new string[] {
                        "Loans",
                        "Loan",
                        "9"});
            table1.AddRow(new string[] {
                        "Entertainment",
                        "Expense",
                        "10"});
            table1.AddRow(new string[] {
                        "Taxes",
                        "Tax",
                        "11"});
            table1.AddRow(new string[] {
                        "Personal Care",
                        "Expense",
                        "12"});
#line 8
 testRunner.Given("the following budget classes exist:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[0]);
#line 23
 testRunner.Then("I can add the following buget lines:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                Dflow_2_Feature_ManageBudgetLinesFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                Dflow_2_Feature_ManageBudgetLinesFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
