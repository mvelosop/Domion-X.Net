//------------------------------------------------------------------------------
//  TennantManager.cs
//
//  Implementation of: TennantManager (Class) <<entity-manager>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 05-jun-2017 20:08:13
//  Original author: Miguel
//------------------------------------------------------------------------------

using DFlow.Tennants.Core.Model;
using DFlow.Tennants.Core.Services;
using DFlow.Tennants.Lib.Data;
using Domion.Core.Services;
using Domion.Lib.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;

namespace DFlow.Tennants.Lib.Services
{
	public class TennantManager : BaseRepository<Tennant, int>, IQueryManager<Tennant>, IEntityManager<Tennant, int>, ITennantManager
	{
		public static string duplicateByOwnerError = @"There's another Tennant with Owner ""{0}"", can't duplicate (Id={1})!";

		public TennantManager(TennantsDbContext dbContext)
			: base(dbContext)
		{
		}

		public Tennant FindDuplicateByOwner(Tennant entity)
		{
			if (entity.Id == 0)
			{
				return Query(t => t.Owner == entity.Owner.Trim()).SingleOrDefault();
			}
			else
			{
				return Query(t => t.Owner == entity.Owner.Trim() && t.Id != entity.Id).SingleOrDefault();
			}
		}

		public override IQueryable<Tennant> Query(Expression<Func<Tennant, bool>> where)
		{
			return base.Query(where);
		}

		public virtual Tennant Refresh(Tennant entity)
		{
			base.Detach(entity);

			return Find(entity.Id);
		}

		public new virtual IEnumerable<ValidationResult> TryDelete(Tennant entity)
		{
			return base.TryDelete(entity);
		}

		public new virtual IEnumerable<ValidationResult> TryInsert(Tennant entity)
		{
			if (entity.RowVersion != null && entity.RowVersion.Length > 0) throw new InvalidOperationException("RowVersion not empty on Insert");

			CommonSaveOperations(entity);

			return base.TryInsert(entity);
		}

		public new virtual IEnumerable<ValidationResult> TryUpdate(Tennant entity)
		{
			if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException("RowVersion empty on Update");

			CommonSaveOperations(entity);

			return base.TryUpdate(entity);
		}

		public virtual IEnumerable<ValidationResult> TryUpsert(Tennant entity)
		{
			if (entity.Id == 0)
			{
				return TryInsert(entity);
			}
			else
			{
				return TryUpdate(entity);
			}
		}

		internal virtual void CommonSaveOperations(Tennant entity)
		{
			TrimStrings(entity);
		}
		protected override IEnumerable<ValidationResult> ValidateDelete(Tennant entity)
		{
			yield break;
		}

		protected override IEnumerable<ValidationResult> ValidateSave(Tennant entity)
		{
			Tennant duplicateByOwner = FindDuplicateByOwner(entity);

			if (duplicateByOwner != null)
			{
				yield return new ValidationResult(string.Format(duplicateByOwnerError, duplicateByOwner.Owner, duplicateByOwner.Id), new[] { "Owner" });
			}

			yield break;
		}

		private void TrimStrings(Tennant entity)
		{
			if (entity.Owner != null) entity.Owner = entity.Owner.Trim();
		}
	}
}