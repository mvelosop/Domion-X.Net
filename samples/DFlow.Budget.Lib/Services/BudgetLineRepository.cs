//------------------------------------------------------------------------------
//  BudgetLineRepository.cs
//
//  Implementation of: BudgetLineRepository (Class) <<entity-repository>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 06-ago-2017 19:50:46
//  Original author: Miguel
//------------------------------------------------------------------------------

using DFlow.Budget.Core.Model;
using DFlow.Budget.Core.Services;
using DFlow.Budget.Lib.Data;
using Domion.Core.Services;
using Domion.Lib.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace DFlow.Budget.Lib.Services
{
	public class BudgetLineRepository : BaseRepository<BudgetLine, int>, IBudgetLineRepository
	{
		public static readonly string ConcurrentUpdateError = @"The BudgetLine was updated by another user, can't update or delete, must refresh first! (Id={0})";

		public static readonly string DuplicateByNameError = @"There's another BudgetLine with Name ""{0}"", can't duplicate! (Id={1})";

		/// <inheritdoc />
		public BudgetLineRepository(BudgetDbContext dbContext)
			: base(dbContext)
		{
		}

		/// <inheritdoc />
		public BudgetLine FindDuplicateByName(BudgetLine entity)
		{
			Expression<Func<BudgetLine, bool>> where = bl => bl.Name == entity.Name.Trim();

			IQueryable<BudgetLine> query = Query().Where(where);

			if (entity.Id != 0)
			{
				query = query.Where(bl => bl.Id != entity.Id);
			}

			return query.SingleOrDefault();
		}

		/// <summary>
		///     Returns an IQueryable that, when enumerated, will retrieve the objects that satisfy the where condition
		///     or all of them if where condition is null.
		/// </summary>
		public override IQueryable<BudgetLine> Query(Expression<Func<BudgetLine, bool>> where)
		{
			return base.Query(where);
		}

		/// <inheritdoc />
		public virtual BudgetLine Refresh(BudgetLine entity)
		{
			DetachInternal(entity);

			return Find(entity.Id);
		}

		/// <inheritdoc />
		public virtual async Task<BudgetLine> RefreshAsync(BudgetLine entity)
		{
			DetachInternal(entity);

			return await FindAsync(entity.Id);
		}

		/// <inheritdoc />
		public new virtual List<ValidationResult> TryDelete(BudgetLine entity)
		{
			if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException($"Missing {nameof(entity.RowVersion)} on Delete");

			List<ValidationResult> errors = ValidateConcurrentUpdate(entity);

			return errors.Any() ? errors : base.TryDelete(entity);
		}

		/// <inheritdoc />
		public new virtual List<ValidationResult> TryInsert(BudgetLine entity)
		{
			if (entity.RowVersion != null && entity.RowVersion.Length > 0) throw new InvalidOperationException($"Existing {nameof(entity.RowVersion)} on Insert");

			CommonSaveOperations(entity);

			return base.TryInsert(entity);
		}

		/// <inheritdoc />
		public new virtual List<ValidationResult> TryUpdate(BudgetLine entity)
		{
			if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException($"Missing {nameof(entity.RowVersion)} on Update");

			List<ValidationResult> errors = ValidateConcurrentUpdate(entity);

			if (errors.Any())
			{
				return errors;
			}

			CommonSaveOperations(entity);

			return base.TryUpdate(entity);
		}

		/// <inheritdoc />
		public virtual List<ValidationResult> TryUpsert(BudgetLine entity)
		{
			return entity.Id == 0 ? TryInsert(entity) : TryUpdate(entity);
		}

		/// <inheritdoc />
		public override IEnumerable<ValidationResult> ValidateDelete(BudgetLine entity)
		{
			yield break;
		}

		/// <inheritdoc />
		public override IEnumerable<ValidationResult> ValidateSave(BudgetLine entity)
		{
			BudgetLine duplicateByName = FindDuplicateByName(entity);

			if (duplicateByName != null)
			{
				yield return new ValidationResult(string.Format(DuplicateByNameError, duplicateByName.Name, duplicateByName.Id), new[] { "Name" });
			}

			yield break;
		}

		/// <summary>
		///     Performs operations that have to be executed both on inserts and updates.
		/// </summary>
		internal virtual void CommonSaveOperations(BudgetLine entity)
		{
			TrimStrings(entity);
		}

		private void DetachInternal(BudgetLine entity)
		{
			Detach(entity);
		}

		private void TrimStrings(BudgetLine entity)
		{
			if (entity.Name != null) entity.Name = entity.Name.Trim();
		}

		private List<ValidationResult> ValidateConcurrentUpdate(BudgetLine entity)
		{
			if (entity == null) throw new ArgumentNullException(nameof(entity));

			EntityEntry<BudgetLine> entry = DbContext.Entry(entity);

			var error = new List<ValidationResult>();

			var originalRowVersion = entry.OriginalValues["RowVersion"] as byte[];

			if (originalRowVersion == null || originalRowVersion.Length == 0)
			{
				throw new InvalidOperationException($"Invalid {nameof(entity.RowVersion)} on update or delete");
			}

			if (!entity.RowVersion.SequenceEqual(originalRowVersion))
			{
				error.Add(new ValidationResult(string.Format(ConcurrentUpdateError, entity.Id)));
			}

			return error;
		}
	}
}