//------------------------------------------------------------------------------
//  BudgetLineManager.cs
//
//  Implementation of: BudgetLineManager (Class) <<entity-manager>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 05-jul-2017 0:22:21
//  Original author: Miguel
//------------------------------------------------------------------------------

using DFlow.Budget.Core.Model;
using DFlow.Budget.Core.Services;
using DFlow.Budget.Lib.Data;
using Domion.Core.Services;
using Domion.Lib.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;

namespace DFlow.Budget.Lib.Services
{
    public class BudgetLineRepository : BaseRepository<BudgetLine, int>, IRepositoryQuery<BudgetLine>, IEntityFinder<BudgetLine, int>, IBudgetLineRepository
    {
        public static string duplicateByNameError = @"There's another BudgetLine with Name ""{0}"", can't duplicate! (Id={1})";

        /// <summary>
        ///     EntityManager for BudgetLine
        /// </summary>
        public BudgetLineRepository(BudgetDbContext dbContext)
            : base(dbContext)
        {
        }

        /// <summary>
        ///     Returns another BudgetLine with the same Name if it exists or null if doesn't.
        /// </summary>
        public BudgetLine FindDuplicateByName(BudgetLine entity)
        {
            if (entity.Id == 0)
            {
                return Query(bl => bl.Name == entity.Name.Trim()).SingleOrDefault();
            }
            else
            {
                return Query(bl => bl.Name == entity.Name.Trim() && bl.Id != entity.Id).SingleOrDefault();
            }
        }

        /// <summary>
        ///     Returns an IQueryable that, when enumerated, will retrieve the objects that satisfy the where condition
        ///     or all of them if where condition is null.
        /// </summary>
        public override IQueryable<BudgetLine> Query(Expression<Func<BudgetLine, bool>> where = null)
        {
            return base.Query(where);
        }

        /// <summary>
        ///     <para>
        ///         Refreshes the entity in the DbContext's change tracker, requerying the database.
        ///     </para>
        ///     <para>
        ///         Important, this only refreshes the passed entity. It does not refresh the related entities
        ///         (navigation or collection properties). If needed yo have to modify this method and call the
        ///         method on each one.
        ///     </para>
        /// </summary>
        public virtual BudgetLine Refresh(BudgetLine entity)
        {
            base.Detach(entity);

            return Find(entity.Id);
        }

        /// <summary>
        ///     Marks an entity for deletion in the DbContext's change tracker if no errors are found in the ValidateDelete method.
        /// </summary>
        public new virtual IEnumerable<ValidationResult> TryDelete(BudgetLine entity)
        {
            return base.TryDelete(entity);
        }

        /// <summary>
        ///     Adds an entity for insertion in the DbContext's change tracker if no errors are found in the ValidateSave method.
        ///     This method also checks that the concurrency token (RowVersion) is EMPTY.
        /// </summary>
        public new virtual IEnumerable<ValidationResult> TryInsert(BudgetLine entity)
        {
            if (entity.RowVersion != null && entity.RowVersion.Length > 0) throw new InvalidOperationException("RowVersion not empty on Insert");

            CommonSaveOperations(entity);

            return base.TryInsert(entity);
        }

        /// <summary>
        ///     Marks an entity for update in the DbContext's change tracker if no errors are found in the ValidateSave method.
        ///     This method also checks that the concurrency token (RowVersion) is NOT EMPTY.
        /// </summary>
        public new virtual IEnumerable<ValidationResult> TryUpdate(BudgetLine entity)
        {
            if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException("RowVersion empty on Update");

            CommonSaveOperations(entity);

            return base.TryUpdate(entity);
        }

        /// <summary>
        ///     Calls TryInsert or TryUpdate accordingly, based on the value of the Id property;
        /// </summary>
        public virtual IEnumerable<ValidationResult> TryUpsert(BudgetLine entity)
        {
            if (entity.Id == 0)
            {
                return TryInsert(entity);
            }
            else
            {
                return TryUpdate(entity);
            }
        }

        /// <summary>
        ///     Returns the validation results for conditions that prevent the entity to be removed.
        /// </summary>
        public override IEnumerable<ValidationResult> ValidateDelete(BudgetLine entity)
        {
            yield break;
        }

        /// <summary>
        ///     Returns the validation results for conditions that prevent the entity to be added or updated.
        /// </summary>
        public override IEnumerable<ValidationResult> ValidateSave(BudgetLine entity)
        {
            BudgetLine duplicateByName = FindDuplicateByName(entity);

            if (duplicateByName != null)
            {
                yield return new ValidationResult(string.Format(duplicateByNameError, duplicateByName.Name, duplicateByName.Id), new[] { "Name" });
            }

            yield break;
        }

        /// <summary>
        ///     Performs operations that have to be executed both on inserts and updates.
        /// </summary>
        internal virtual void CommonSaveOperations(BudgetLine entity)
        {
            TrimStrings(entity);
        }

        private void TrimStrings(BudgetLine entity)
        {
            if (entity.Name != null) entity.Name = entity.Name.Trim();
        }
    }
}
