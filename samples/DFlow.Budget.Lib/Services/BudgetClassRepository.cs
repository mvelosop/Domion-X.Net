//------------------------------------------------------------------------------
//  BudgetClassRepository.cs
//
//  Implementation of: BudgetClassRepository (Class) <<entity-repository>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 02-jun-2017 10:49:07
//  Original author: Miguel
//------------------------------------------------------------------------------

using DFlow.Budget.Core.Model;
using DFlow.Budget.Core.Services;
using DFlow.Budget.Lib.Data;
using DFlow.Tenants.Core.Model;
using Domion.Lib.Data;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Threading.Tasks;

namespace DFlow.Budget.Lib.Services
{
    public class BudgetClassRepository : BaseRepository<BudgetClass, int>, IBudgetClassRepository
    {
        public static readonly string ConcurrentUpdateError = @"The BudgetClass was updated by another user, can't update or delete, must refresh first! (Id={0})";

        public static readonly string DuplicateByNameError = @"There's another BudgetClass with Name ""{0}"", can't duplicate! (Id={1})";

        private readonly Tenant _currentTenant;

        /// <inheritdoc />
        public BudgetClassRepository(BudgetDbContext dbContext, Tenant currentTenant)
            : base(dbContext)
        {
            _currentTenant = currentTenant ?? throw new ArgumentNullException(nameof(currentTenant));
        }

        /// <inheritdoc />
        public BudgetClass FindDuplicateByName(BudgetClass entity)
        {
            Expression<Func<BudgetClass, bool>> where = bc => bc.Name == entity.Name.Trim();

            IQueryable<BudgetClass> query = Query().Where(where);

            if (entity.Id != 0)
            {
                query = query.Where(bc => bc.Id != entity.Id);
            }

            return query.SingleOrDefault();
        }

        /// <summary>
        ///     Returns an IQueryable that, when enumerated, will retrieve the objects that satisfy the where condition
        ///     or all of them if where condition is null.
        /// </summary>
        public override IQueryable<BudgetClass> Query(Expression<Func<BudgetClass, bool>> where)
        {
            return base.Query(where).Where(bc => bc.Tenant_Id == _currentTenant.Id);
        }

        /// <inheritdoc />
        public virtual BudgetClass Refresh(BudgetClass entity)
        {
            DetachInternal(entity);

            return Find(entity.Id);
        }

        /// <inheritdoc />
        public virtual async Task<BudgetClass> RefreshAsync(BudgetClass entity)
        {
            DetachInternal(entity);

            return await FindAsync(entity.Id);
        }

        /// <inheritdoc />
        public new virtual List<ValidationResult> TryDelete(BudgetClass entity)
        {
            if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException($"Missing {nameof(entity.RowVersion)} on Delete");

            List<ValidationResult> errors = ValidateConcurrentUpdate(entity);

            return errors.Any() ? errors : base.TryDelete(entity);
        }

        /// <inheritdoc />
        public new virtual List<ValidationResult> TryInsert(BudgetClass entity)
        {
            if (entity.RowVersion != null && entity.RowVersion.Length > 0) throw new InvalidOperationException($"Existing {nameof(entity.RowVersion)} on Insert");

            CommonSaveOperations(entity);

            entity.Tenant_Id = _currentTenant.Id;

            return base.TryInsert(entity);
        }

        /// <inheritdoc />
        public new virtual List<ValidationResult> TryUpdate(BudgetClass entity)
        {
            if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException($"Missing {nameof(entity.RowVersion)} on Update");

            List<ValidationResult> errors = ValidateConcurrentUpdate(entity);

            if (errors.Any())
            {
                return errors;
            }

            CommonSaveOperations(entity);

            return base.TryUpdate(entity);
        }

        /// <inheritdoc />
        public virtual List<ValidationResult> TryUpsert(BudgetClass entity)
        {
            return entity.Id == 0 ? TryInsert(entity) : TryUpdate(entity);
        }

        /// <inheritdoc />
        public override IEnumerable<ValidationResult> ValidateDelete(BudgetClass entity)
        {
            yield break;
        }

        /// <inheritdoc />
        public override IEnumerable<ValidationResult> ValidateSave(BudgetClass entity)
        {
            BudgetClass duplicateByName = FindDuplicateByName(entity);

            if (duplicateByName != null)
            {
                yield return new ValidationResult(string.Format(DuplicateByNameError, duplicateByName.Name, duplicateByName.Id), new[] { "Name" });
            }

            yield break;
        }

        /// <summary>
        ///     Performs operations that have to be executed both on inserts and updates.
        /// </summary>
        internal virtual void CommonSaveOperations(BudgetClass entity)
        {
            TrimStrings(entity);
        }

        private void DetachInternal(BudgetClass entity)
        {
            Detach(entity);
        }

        private void TrimStrings(BudgetClass entity)
        {
            if (entity.Name != null) entity.Name = entity.Name.Trim();
        }

        private List<ValidationResult> ValidateConcurrentUpdate(BudgetClass entity)
        {
            if (entity == null) throw new ArgumentNullException(nameof(entity));

            EntityEntry<BudgetClass> entry = DbContext.Entry(entity);

            var error = new List<ValidationResult>();

            var originalRowVersion = entry.OriginalValues["RowVersion"] as byte[];

            if (originalRowVersion == null || originalRowVersion.Length == 0)
            {
                throw new InvalidOperationException($"Invalid {nameof(entity.RowVersion)} on update or delete");
            }

            if (!entity.RowVersion.SequenceEqual(originalRowVersion))
            {
                error.Add(new ValidationResult(string.Format(ConcurrentUpdateError, entity.Id)));
            }

            return error;
        }
    }
}
