//------------------------------------------------------------------------------
//  BankAccountManager.cs
//
//  Implementation of: BankAccountManager (Class) <<entity-manager>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 04-jun-2017 11:34:35
//  Original author: Miguel
//------------------------------------------------------------------------------

using DFlow.Transactions.Core.Model;
using DFlow.Transactions.Core.Services;
using DFlow.Transactions.Lib.Data;
using Domion.Core.Services;
using Domion.Lib.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;

namespace DFlow.Transactions.Lib.Services
{
    public class BankAccountManager : BaseRepository<BankAccount, int>, IQueryManager<BankAccount>, IEntityManager<BankAccount, int>, IBankAccountManager
    {
        public static string duplicateByAccountNameError = @"There's another BankAccount with AccountName ""{0}"", can't duplicate (Id={1})!";

        public BankAccountManager(TransactionsDbContext dbContext)
            : base(dbContext)
        {
        }

        public BankAccount FindDuplicateByAccountName(BankAccount entity)
        {
            if (entity.Id == 0)
            {
                return Query(ba => ba.AccountName == entity.AccountName.Trim()).SingleOrDefault();
            }
            else
            {
                return Query(ba => ba.AccountName == entity.AccountName.Trim() && ba.Id != entity.Id).SingleOrDefault();
            }
        }

        public override IQueryable<BankAccount> Query(Expression<Func<BankAccount, bool>> where)
        {
            return base.Query(where);
        }

        public virtual BankAccount Refresh(BankAccount entity)
        {
            base.Detach(entity);

            return Find(entity.Id);
        }

        public new virtual IEnumerable<ValidationResult> TryDelete(BankAccount entity)
        {
            return base.TryDelete(entity);
        }

        public new virtual IEnumerable<ValidationResult> TryInsert(BankAccount entity)
        {
            if (entity.RowVersion != null && entity.RowVersion.Length > 0) throw new InvalidOperationException("RowVersion not empty on Insert");

            CommonSaveOperations(entity);

            return base.TryInsert(entity);
        }

        public new virtual IEnumerable<ValidationResult> TryUpdate(BankAccount entity)
        {
            if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException("RowVersion empty on Update");

            CommonSaveOperations(entity);

            return base.TryUpdate(entity);
        }

        public virtual IEnumerable<ValidationResult> TryUpsert(BankAccount entity)
        {
            if (entity.Id == 0)
            {
                return TryInsert(entity);
            }
            else
            {
                return TryUpdate(entity);
            }
        }

        internal virtual void CommonSaveOperations(BankAccount entity)
        {
            TrimStrings(entity);
        }

        protected override IEnumerable<ValidationResult> ValidateDelete(BankAccount entity)
        {
            yield break;
        }

        protected override IEnumerable<ValidationResult> ValidateSave(BankAccount entity)
        {
            BankAccount duplicateByAccountName = FindDuplicateByAccountName(entity);

            if (duplicateByAccountName != null)
            {
                yield return new ValidationResult(string.Format(duplicateByAccountNameError, duplicateByAccountName.AccountName, duplicateByAccountName.Id), new[] { "AccountName" });
            }

            yield break;
        }

        private void TrimStrings(BankAccount entity)
        {
            if (entity.AccountName != null) entity.AccountName = entity.AccountName.Trim();
            if (entity.AccountNumber != null) entity.AccountNumber = entity.AccountNumber.Trim();
            if (entity.BankName != null) entity.BankName = entity.BankName.Trim();
        }
    }
}
