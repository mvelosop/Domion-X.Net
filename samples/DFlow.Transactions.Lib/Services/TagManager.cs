//------------------------------------------------------------------------------
//  TagManager.cs
//
//  Implementation of: TagManager (Class) <<entity-manager>>
//  Generated by Domion-MDA - http://www.coderepo.blog/domion
//
//  Created on     : 02-jun-2017 10:49:10
//  Original author: Miguel
//------------------------------------------------------------------------------

using DFlow.Transactions.Core.Model;
using DFlow.Transactions.Core.Services;
using DFlow.Transactions.Lib.Data;
using Domion.Core.Services;
using Domion.Lib.Data;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;

namespace DFlow.Transactions.Lib.Services
{
	public class TagManager : BaseRepository<Tag, int>, IEntityManager<Tag, int>, ITagManager
	{
		public static string duplicateByNameError = @"There's another Tag with Name ""{0}"", can't duplicate (Id={1})!";

		public TagManager(TransactionsDbContext dbContext)
			: base(dbContext)
		{
		}

		public Tag FindDuplicateByName(Tag entity)
		{
			if (entity.Id == 0)
			{
				return FirstOrDefault(t => t.Name == entity.Name.Trim());
			}
			else
			{
				return FirstOrDefault(t => t.Name == entity.Name.Trim() && t.Id != entity.Id);
			}
		}

		public override IQueryable<Tag> Query(Expression<Func<Tag, bool>> where)
		{
			return base.Query(where);
		}

		public virtual Tag Refresh(Tag entity)
		{
			base.Detach(entity);

			return Find(entity.Id);
		}

		public new virtual IEnumerable<ValidationResult> TryDelete(Tag entity)
		{
			return base.TryDelete(entity);
		}

		public new virtual IEnumerable<ValidationResult> TryInsert(Tag entity)
		{
			if (entity.RowVersion != null && entity.RowVersion.Length > 0) throw new InvalidOperationException("RowVersion not empty on Insert");

			CommonSaveOperations(entity);

			return base.TryInsert(entity);
		}

		public new virtual IEnumerable<ValidationResult> TryUpdate(Tag entity)
		{
			if (entity.RowVersion == null || entity.RowVersion.Length == 0) throw new InvalidOperationException("RowVersion empty on Update");

			CommonSaveOperations(entity);

			return base.TryUpdate(entity);
		}

		public virtual IEnumerable<ValidationResult> TryUpsert(Tag entity)
		{
			if (entity.Id == 0)
			{
				return TryInsert(entity);
			}
			else
			{
				return TryUpdate(entity);
			}
		}

		public override IEnumerable<ValidationResult> ValidateDelete(Tag entity)
		{
			return Enumerable.Empty<ValidationResult>();
		}

		public override IEnumerable<ValidationResult> ValidateSave(Tag entity)
		{
			Tag duplicateByName = FindDuplicateByName(entity);

			if (duplicateByName != null)
			{
				yield return new ValidationResult(string.Format(duplicateByNameError, duplicateByName.Name, duplicateByName.Id), new[] { "Name" });
			}

			yield break;
		}

		internal virtual void CommonSaveOperations(Tag entity)
		{
			TrimStrings(entity);
		}

		private void TrimStrings(Tag entity)
		{
			if (entity.Name != null) entity.Name = entity.Name.Trim();
		}
	}
}